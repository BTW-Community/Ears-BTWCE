buildscript {
	repositories {
		maven { url "https://teavm.org/maven/repository/" }
	}
	dependencies {
		classpath "org.teavm:teavm-tooling:0.7.0-dev-1192"
	}
}
def newGradle = true
try {
	apply plugin: 'java-library'
} catch (e) {
	newGradle = false
	apply plugin: 'java'
}

sourceCompatibility = targetCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://libraries.minecraft.net/' }
	maven { url 'https://repo.spongepowered.org/maven/' }
	maven { url "https://teavm.org/maven/repository/" }
}

configurations {
	teavm
}

if (!newGradle) {
	configurations {
		implementation
		compile.extendsFrom implementation
		api
		compile.extendsFrom api
	}
	sourceSets {
		main {
			java.srcDirs += 'src/legacy/java'
		}
	}
	jar {
		classifier 'legacy'
	}
} else {
	configurations {
		mixinLegacy {
			canBeConsumed = true
			canBeResolved = false
		}
		mixinModern {
			canBeConsumed = true
			canBeResolved = false
		}
		legacy {
			canBeConsumed = true
			canBeResolved = false
		}
		modern {
			canBeConsumed = true
			canBeResolved = false
		}
	}
	sourceSets {
		legacy {
			compileClasspath += sourceSets.main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
		mixin {
			compileClasspath += sourceSets.main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
		js {
			compileClasspath += sourceSets.main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
		modern {
			compileClasspath += sourceSets.main.output
			compileClasspath += sourceSets.main.compileClasspath
			runtimeClasspath += sourceSets.main.output
			runtimeClasspath += sourceSets.main.runtimeClasspath
		}
	}
	
	jar {
		classifier 'base'
	}
	
	task mixinLegacyJar(type: Jar) {
		from sourceSets.main.output
		from sourceSets.mixin.output
		from sourceSets.legacy.output
		
		classifier 'mixin-legacy'
	}
	
	task mixinModernJar(type: Jar) {
		from sourceSets.main.output
		from sourceSets.mixin.output
		from sourceSets.modern.output
		
		classifier 'mixin-modern'
	}
	
	task legacyJar(type: Jar) {
		from sourceSets.main.output
		from sourceSets.legacy.output
		
		classifier 'legacy'
	}
	
	task modernJar(type: Jar) {
		from sourceSets.main.output
		from sourceSets.modern.output
		
		classifier 'modern'
	}
	
	build.dependsOn mixinLegacyJar
	build.dependsOn mixinModernJar
	build.dependsOn legacyJar
	build.dependsOn modernJar
	
	artifacts {
		mixinLegacy mixinLegacyJar
		mixinModern mixinModernJar
		legacy legacyJar
		modern modernJar
	}
}

dependencies {
	implementation('org.spongepowered:mixin:0.7-SNAPSHOT') {
		exclude group: 'net.minecraft'
	}
	implementation 'org.apache.logging.log4j:log4j-core:2.0-beta9'
	implementation 'org.teavm:teavm-classlib:0.7.0-dev-1192'
	
	teavm 'org.teavm:teavm-classlib:0.7.0-dev-1192'
}

import org.teavm.tooling.TeaVMTool
import org.teavm.tooling.TeaVMTargetType
import org.teavm.tooling.sources.DirectorySourceFileProvider
import org.teavm.tooling.TeaVMProblemRenderer
import org.teavm.tooling.ConsoleTeaVMToolLog
if (rootProject == project) {
	task teavm {
		doFirst {
			file('build/teavm').mkdirs()
		}
		dependsOn compileJsJava
		inputs.dir file('src')
		outputs.dir file('build/teavm')
		
		def tool = new TeaVMTool()
		tool.targetDirectory = file('build/teavm')
		tool.addSourceFileProvider(new DirectorySourceFileProvider(file('src/main/java')))
		tool.sourceMapsFileGenerated = true
		tool.mainClass = 'com.unascribed.ears.common.EarsJS'
		tool.entryPointName = 'rebuildQuads'
		tool.targetType = TeaVMTargetType.JAVASCRIPT
		tool.log = new ConsoleTeaVMToolLog(true)
		tool.obfuscated = false
		def urls = []
		urls.add(file('build/classes/java/main').toURI().toURL())
		configurations.teavm.files.each {
			urls.add(it.toURI().toURL())
		}
		def ucl = new URLClassLoader(urls.toArray(new URL[0]), TeaVMTool.class.classLoader)
		tool.classLoader = ucl
		doLast {
			tool.generate()
			TeaVMProblemRenderer.describeProblems(tool.getDependencyInfo().getCallGraph(), tool.getProblemProvider(), tool.log)
		}
	}
	task closure(type: Exec) {
		dependsOn teavm
		inputs.file file('build/teavm/classes.js')
		outputs.file file('build/teavm/classes.min.js')
		commandLine 'google-closure-compiler', '-O', 'SIMPLE', '--js', 'build/teavm/classes.js', '--js_output_file', 'build/teavm/classes.min.js'
	}
} else {
	gradle.taskGraph.whenReady {
		gradle.taskGraph.allTasks.each {
			if (it.project == project) {
				it.onlyIf { false }
			}
		}
	}
}